on:
  workflow_call:
    inputs:
      image-name:         # i.e osl-portal/nginx
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      context:
        required: false
        type: string
        default: "."

      # IF set, push to AWS too:
      aws-access-key-id:
        required: false
        type: string
      aws-secret-access-key:
        required: false
        type: string
      aws-account-id:
        required: false
        type: string
      aws-region:
        required: false
        type: string
        default: "us-west-2"

jobs:

  setup:
    uses: ./.github/workflows/reusable-setup-env.yaml
    with:
      tagname: ${{ github.ref_name }}

  docker-build:
    needs:
      - setup
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    env:
      IMAGE_ORG: ghcr.io/ASFOpenSARlab
      IMAGE_REPO: ${{ inputs.image-name }}
    outputs:
      container-uri: ${{ steps.container.outputs.uri }}
    steps:
      # Pull the Dockerfile:
      - uses: actions/checkout@v4

      # Setup Docker Building on Actions:
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Container Info
        id: container
        run: echo "uri=${{ env.IMAGE_ORG }}/${{ env.IMAGE_REPO }}" | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT

      # Actually Build it:
      - uses: docker/build-push-action@v5
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: true
          pull: true         # Always pull the latest base image before building
          tags: |
            ${{ steps.container.outputs.uri }}:${{ needs.setup.outputs.deploy_prefix }}
            ${{ steps.container.outputs.uri }}:${{ needs.setup.outputs.shortsha }}
            ${{ steps.container.outputs.uri }}:${{ needs.setup.outputs.branchtag }}
            ${{ steps.container.outputs.uri }}:${{ needs.setup.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Optional: Push it to AWS too:
      - if: inputs.aws-access-key-id && inputs.aws-secret-access-key
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      # Since the last one just finished, this should ALWAYS cache-hit:
      - if: inputs.aws-access-key-id && inputs.aws-secret-access-key
        uses: docker/build-push-action@v5
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: true
          pull: true         # Always pull the latest base image before building
          tags: |
            ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ needs.setup.outputs.deploy_prefix }}
            ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ needs.setup.outputs.shortsha }}
            ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ needs.setup.outputs.branchtag }}
            ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ needs.setup.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
